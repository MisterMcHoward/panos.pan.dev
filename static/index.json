[
  {
    "title": "Infrastructure as Code",
    "href": "/automation",
    "content": " Version control your infrastructure and eliminate humanerror from device configuration with infrastructureascode tools and techniques Tell your tools how the configuration should look and let them automate the rest Ansible Ansible is an open source automation language from RedHat that uses modules to communicate with vendor specific devices Ansible offers configuration and orchestration to provide large productivity gains to a wide variety of automation challenges More information Terraform Terraform is an open source tool used to build and deploy infrastructure safely and efficiently Terraform unifies crossvendor configuration in a single language and is cloud platform agnostic unlike AWS CFTs or Azure ARM templates to produces immutable infrastructure deployments More information "
  },
  {
    "title": "Auto Scaling VM-Series Firewalls on AWS 2.1",
    "href": "/autoscaling_aws",
    "content": " Version 21 Firewall Template GA release Overview This release enables a clear separation of the firewall VPCs from the application VPCs This separation allows security teams to offer firewallasaservice to their internal teams such as line of business application developers and DevOps who build ship and run applications called application teams here This enables separate billing and management of each In addition security and application teams can put specific restrictions such as tight security groups no IGW etc on the application VPCs for a stronger security posture and leave all security of inbound traffic to the security team Enforcement of these policybased capabilities on the application VPCs can be easily done through services such as RedLockhttpswwwpaloaltonetworkscomredlock while VMSeries provides the network security protections and visibility Also as the number of protected application VPCs grow security teams can use the auto scaling stack of firewalls for elastic ondemand security Each application via its related internal load balancer are mapped to a load balancing rule in the external load balancer This architecture uses a load balancer sandwich for protecting Internet facing applications for other use cases click here httpsgithubcomPaloAltoNetworksawselbautoscaling Topology SingleVPC alt textassetscftelb21SingleVPCpng Topology for the Auto Scaling VMSeries Firewalls in a SingleVPC on AWS Version 21 MultiVPC alt textassetscftelb21MultiVPCpng Topology for the Auto Scaling VMSeries Firewalls in MultiVPC on AWS Version 21 Features Support for separating the frontend firewall VPC from the backend application VPC using AWS PrivateLink or VPC peering Support for specific combinations of external and internal load balancing using ALB and NLB The early release version CommunitySupported allows new deployment of ALB as external load balancer and NLB as the internal load balancer Both oc which must be deployed into new VPCs This version may be used as a reference by advanced customers who build their own custom implementation of auto scaling VMSeries The firewall VPCs and application VPCs can be part of same AWS account or different accounts ie crossaccount Documentation Use of version 21 is recommended only for those users already familar with the existing auto scaling solution version 21 T The deployment guide can be found here httpsdocspaloaltonetworkscomvmseries90vmseriesdeploymentsetupthevmseriesfirewallonawsautoscalevmseriesfirewallswiththeamazonelbvmseriesautoscaletemplateforawsversionv21html Support Policy The Firewall Template is a GA Release Officially Supported The autoscaling firewall template is released under the official support policy of Palo Alto Networks through the support options that youve purchased for example Premium Support support teams or ASC Authorized Support Centers partners and Premium Partner Support options The support scope is restricted to troubleshooting for the statedintended use cases and product versions specified in the project documentation and does not cover customization of the scripts or templates The Application Template is CommunitySupported aka NOT TAC SUPPORTED This CFT is released under an asis best effort support policy These scripts should be seen as community supported and Palo Alto Networks will contribute our expertise as and when possible We do not provide technical support or help in using or troubleshooting the components of the project through our normal support options such as Palo Alto Networks support teams or ASC Authorized Support Centers partners and backline support options The underlying product used the VMSeries firewall by the scripts or templates are still supported but the support is only for the product functionality and not for help in deploying or using the template or script itself Unless explicitly tagged all projects or work posted in our GitHub repository at httpsgithubcomPaloAltoNetworks or sites other than our official Downloads page on httpssupportpaloaltonetworkscom are provided under the best effort policy "
  },
  {
    "title": "ALB/NLB Load Balancer Sandwich",
    "href": "/aws_alb_sandwich",
    "content": " Using VMSeries Firewalls and an ALB Sandwich in AWS Customers are looking for different ways to ensure inbound high availability and scale for their AWS deployments Several options exist including traditional two device HA in active passive mode or Auto Scaling the VMSeries alttextassetsalbsandwichdiagrampng This ALB sandwich CloudFormation Template deploys a pair of VMSeries Firewalls and 2 Web Servers with an external Application Load Balancer and either an internal Application Load Balancer or Network Load Balancer depending on which CFT is chosen The ALB sandwich with the VMSeries is an elegant and simplified way to manually scale VMSeries deployments to address planned or projected traffic increases while also delivering multiAvailability Zone HA Manual scale the ALB sandwich allows you to add via script or manual process additional VMSeries firewalls can be added to the deployment to address plannedprojected inbound traffic increases Multiavailability zone high availability two VMSeries firewalls deployed in separate Availability Zones with traffic being distributed by the AWS load balancers enables a cloudcentric approach to resiliency and availability The ALB sandwich is dependent on PANOS 81 as it uses the new FQDN object for NAT rules to automatically update the IP addresses Instructions 0 Create the Bootstrap bucket place the Bootstrapxml and initcfgtxt files into the Config folder Creating the Bootstrap Buckethttpswwwpaloaltonetworkscomdocumentation71virtualizationvirtualizationbootstrapthevmseriesfirewallbootstrappackage 1 Deploy the CFT 2 Launch a Jumpbox into either NATGateway Subnet 3 Access the Jumpbox to gain access to the Firewall GUIs UsernamePassword pandemodemopassword The CFT creates a sgJumpbox Security Group for use allowing ports 22 and 3389 4 Update the albinternal object with the FQDN of the Internal ALB available on the Outputs of the CFT 5 Update the AWSNATUNTRUST object with the Firewalls Untrust IP address available on the Outputs of the CFT 6 Test access do the External ALB FQDN API commands to update the necessary objects Get API Key curl X GET httpsFirewall Management IPapitypekeygenuserpandemopassworddemopassword k API key for pandemo Replace in the following curl commands if different LUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0 Working Show address objects curl kg X GET httpsFirewall Management IPapitypeconfigactiongetkeyLUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0xpathconfigdevicesentryvsysentryaddress Untrust Interface curl kg X GET httpsFirewall Management IPapikeyLUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0typeconfigactionsetxpathconfigdevicesentryvsysentryaddressentrynameAWSNATUNTRUSTelementFirewall Untrust IP albinternal IP curl kg X GET httpsFirewall Management IPapikeyLUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0typeconfigactionsetxpathconfigdevicesentryvsysentryaddressentrynamealbinternalelementInternal ALB IP albfqdn curl kg X GET httpsFirewall Management IPapikeyLUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0typeconfigactionsetxpathconfigdevicesentryvsysentryaddressentrynamealbfqdnelementInternal ALB FQDN Commit curl kg X GET httpsFirewall Management IPapitypecommitcmdkeyLUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0 Documentation Release Notes Included in this repository About the VMSeries Firewall for AWShttpsawspaloaltonetworkscom More cloud templates are available at httplivepaloaltonetworkscomcloudtemplate "
  },
  {
    "title": "AWS",
    "href": "/aws_qs",
    "content": " Auto Scaling VMSeries in AWS Cloud Transit VPC with the VMSeries on AWS "
  },
  {
    "title": "Azure",
    "href": "/azure_qs",
    "content": " Scale Out Architectures for the VMSeries on Azure "
  },
  {
    "title": "Cloud Security",
    "description": "Getting started with pango",
    "keywords": [
      "pan-os",
      "panos",
      "cloud",
      "security",
      "templates",
      "integrations",
      "private cloud",
      "aws",
      "azure",
      "google",
      "gcp"
    ],
    "href": "/cloud",
    "content": " Whether its autoscaling a firewall with a cloud application seamless policy across onprem and cloud or a single place to see all your cloud security events Palo Alto Networks cloud integrations have you covered Cloud Integrations Automate your cloud security deployment ongoing management and event response through cloud integrations and apps to accelerate your journey to the cloud More information "
  },
  {
    "title": "Quickstart",
    "href": "/cloudtemplates_qs",
    "content": " Help needed "
  },
  {
    "title": "GCP",
    "href": "/gcp_qs",
    "content": " VMSeries on Google Cloud Platform Overview "
  },
  {
    "title": "PAN Guard Duty",
    "href": "/pan_guard_duty",
    "content": " Integration between Palo Alto Networks VMSeries FW and Amazon Guard Duty The following sections describe the steps to be able to consume Amazon Guard Duty findings and subsequently apply security policy on the Palo Alto VMSeries Firewalls PreRequisities Requires the use of the pandevice python package Requires the use of the panpython python package Make sure to enable the Guard Duty service on your AWS account Step by Step 1 Clone the repo HTTPS console git clone httpsgithubcomPaloAltoNetworkspanguarddutygit SSH console git clone gitgithubcomPaloAltoNetworkspanguarddutygit 2 In the same directory install the pandevice and panpython packages as described below Make sure you are in panguarddutys parent directory console pip install pandevice t pip install panpython t 3 Edit the lambdafwconfigpy file Update the Mgmt IP of the VMSeries FW and the username and password so that the lambda function can communicate with the FW 4 Create a zip file which contains the lambda code and the python packages console cd zip r zip 5 Create a bucket on S3 Create a folder named lambda in the bucket 6 Upload the zip file to the S3 bucket Upload the zip file into the lambda folder of the bucket 7 Make the changes in the Cloud Formation Template to reference the name of the S3 bucket created in step 4 Change the value of the S3Bucket key to be the name of the S3 bucket created in step 4 Change the value of the S3Key key to be lambda 8 Deploy the Cloud Formation Template Support This templatesolution is released under an asis best effort support policy These scripts should be seen as community supported and Palo Alto Networks will contribute our expertise as and when possible We do not provide technical support or help in using or troubleshooting the components of the project through our normal support options such as Palo Alto Networks support teams or ASC Authorized Support Centers partners and backline support options The underlying product used the VMSeries firewall by the scripts or templates are still supported but the support is only for the product functionality and not for help in deploying or using the template or script itself Unless explicitly tagged all projects or work posted in our GitHub repository at httpsgithubcomPaloAltoNetworks or sites other than our official Downloads page on httpssupportpaloaltonetworkscom are provided under the best effort policy For assistance from the community please post your questions and comments either to the GitHub page where the solution is posted or on our Live Community site "
  },
  {
    "title": "Quickstart",
    "href": "/pandevice_qs",
    "content": " GitHub pagehttpsimgshieldsiobadgeGitHubRepobrightgreenstyleforthebadgelogogithubhttpsgithubcomPaloAltoNetworkspandevice GitHub starshttpsimgshieldsiogithubstarsPaloAltoNetworkspandevicestyleforthebadgehttpsgithubcomPaloAltoNetworkspandevice Installation The easiest method to install pandevice is using pip pip install pandevice Or if you have virtualenvwrapper installed mkvirtualenv pandevice pip install pandevice Pip will install the panpythondocspanpythonqs library as a dependency Upgrade to the latest version pip install upgrade pandevice How to import To use Palo Alto Networks Device Framework in a project python import pandevice You can also be more specific about which modules you want to import python from pandevice import firewall from pandevice import network A few examples For configuration tasks create a tree structure using the classes in each module Nodes hierarchy must follow the model in the Configuration Treehttppandevicereadthedocsioenlatestconfigtreehtml The following examples assume the modules were imported as such python from pandevice import firewall from pandevice import network Create a subinterface and commit python fw firewallFirewall10001 apiusernameadmin apipasswordadmin eth fwaddnetworkEthernetInterfaceethernet11 modelayer3 subeth ethaddnetworkLayer3Subinterfaceethernet1130 ip444424 tag30 subethcreate fwcommit Perform show system info python fw firewallFirewall10001 apiusernameadmin apipasswordadmin print fwopshow system info Some operational commands have methods to refresh the variables in an object python populates the version serial and model variables from the live device fwrefreshsysteminfo See more examples in the Usage Guidehttppandevicereadthedocsioenlatestusagehtml Connecting to PANOS 80 and higher PANOS 80 by default does not allow connections to the API with TLS 10 Unfortunately the latest OSX and many linux distros come with OpenSSL versions that dont support TLS 11 or 12 OpenSSL 101 or higher is needed to connect to PANOS 80 If you try to connect with a lower version of OpenSSL youll get a connection error There are two solutions Option 1 Upgrade OpenSSL more secure Mac OSX In Mac OSX you cant upgrade the builtin OpenSSL but you can install your own python and OpenSSL using Homebrewhttpsbrewsh Follow this guide to get set up Definitive guide to python on OSXhttpsmediumcombriantorresgildefinitiveguidetopythononmacosx65acd8d969d0 Linux Use the instructions for your distributions package manager to upgrade OpenSSL to 101 or higher Option 2 Enable TLS 10 on PANOS less secure Follow the direction in the PANOS Administrator Guide Replace the Certificate for Inbound Management Traffichttpswwwpaloaltonetworkscomdocumentation80panospanoscertificatemanagementreplacethecertificateforinboundmanagementtraffic "
  },
  {
    "title": "Quickstart",
    "description": "Getting started with pango",
    "keywords": [
      "pan-os",
      "panos",
      "xml",
      "api",
      "rest",
      "sdk",
      "pango",
      "go",
      "golang"
    ],
    "href": "/pango_qs",
    "content": " GitHub pagehttpsimgshieldsiobadgeGitHubRepobrightgreenstyleforthebadgelogogithubhttpsgithubcomPaloAltoNetworkspango GitHub starshttpsimgshieldsiogithubstarsPaloAltoNetworkspangostyleforthebadgehttpsgithubcomPaloAltoNetworkspango Package pango is a golang cross version mechanism for interacting with Palo Alto Networks devices including physical and virtualized Nextgeneration Firewalls and Panorama Versioning support is in place for PANOS 61 to 81 Documentation Please refer to the godochttpsgodocorggithubcomPaloAltoNetworkspango reference documentation Using pango To start create a client connection with the desired parameters and then initialize the connection go package main import log githubcomPaloAltoNetworkspango func main var err error c pangoFirewallClient pangoClient Hostname 127001 Username admin Password admin Logging pangoLogAction pangoLogOp if err cInitialize err nil logPrintfFailed to initialize client s err return logPrintfInitialize ok Initializing the connection creates the API key if it was not already specified then performs show system info to get the PANOS version Once the firewall client connection is created you can query and configure the Palo Alto Networks device from the functions inside the various namespaces of the client connection Configuration namespaces Namespaces correspond to the various configuration areas available in the GUI For example go err cNetworkEthernetInterfaceSet myPolicies err cPoliciesSecurityGetList Generally speaking there are the following functions inside each namespace GetList ShowList Get Show Set Edit Delete These functions correspond with PANOS Get Show Set Edit and Delete API calls Get Set and Edit take and return normalized version independent objects These version safe objects are typically named Entry which corresponds to how the object is placed in the PANOS XPATH Some Entry objects have a special function Defaults Invoking this function will initialize the object with some default values Each Entry that implements Defaults calls out in its documentation what parameters are affected by this and what the defaults are For any version safe object attempting to configure a parameter that your PANOS doesnt support will be safely ignored in the resultant XML sent to the firewall Panorama Using Edit Functions The PANOS XML API Edit command can be used to both create as well as update existing config however it can also truncate config for the given XPATH Due to this if you want to use Edit you need to make sure that you perform either a Get or a Show first make your modification then invoke Edit using that object If you dont do this you will truncate any sub config "
  },
  {
    "title": "PAN-OS® API",
    "description": "Overview of the PAN-OS API",
    "keywords": ["pan-os", "panos", "xml", "api", "rest"],
    "href": "/panos_api",
    "content": " When configuring and managing the Palo Alto Networks NextGeneration firewall for scale and agility its important to have a collection of powerful APIs and tools to automate activities and events Our APIs and SDKs provide a collection of open featurerich automation opportunities for the beginning scripter and advanced developer alike XML API A powerful lowlevel API that covers all the firewalls features Take full control of every aspect of your security and build deep integrations with your systems Make API calls directly on the firewall or from Panorama Get Started REST API The new PANOS REST API simplifies access to policy resources on the firewall as toplevel URIs You can use the API to create change and delete these resources directly on the firewall or from Panorama Get Started SDKs Jumpstart your automation project with SDKs for Python and Go PAN Device Framework Objectbased interaction with the firewall in these language simplifies interaction with the firewall so you can focus on the automation itself Get Starteddocspandeviceqs PAN Python SDK Powerful lowlevel SDK for interacting with PANOS WildFire AutoFocus and more Get Starteddocspanpythonqs PAN Go SDK A PANOS GoLang SDK that also serves as the underlying client library for the Palo Alto Networks Terraform provider Get Starteddocspangoqs "
  },
  {
    "title": "Automating IP Blocking",
    "description": "Using Dynamic Address Groups to automate IP blocking",
    "keywords": [
      "PAN-OS",
      "pan-python",
      "XML API",
      "xmlapi",
      "dag",
      "dynamic address group",
      "pan-python",
      "curl",
      "automation"
    ],
    "href": "/panos_dag_qs",
    "content": " In this Quickstart guide well show how to integrate with Palo Alto Networks NextGeneration Firewalls to automatically block communications incoming outgoing or both fromto specific IP addresses This is a common pattern used in partner and customer integrations to automate remediation based on external factors such as alerts or Threat Intel data Common use cases Isolate a client and prevent it from accessing the Internet including Command Control servers and sensitive internal resources block outgoing communications Block a remote malicious IP eg a known C2 server block outgoing communications Block an external IP address that is attacking the corporate network block incoming communications Allow connections to a specific external IP address eg a known SaaS service whitelist outgoing communications This guide leverages the concept of dynamic tags In PANOS it is possible to dynamically associate and remove tags from IP addresses using several ways including the XML API A tag is simply a string that can be used as a match criteria in Dynamic Address Groups allowing the Firewall to dynamically allowblock traffic without requiring a configuration commit While the exact same approach can be applied for whitelisting as in the last examples above for simplicity in this article well just refer to blocking which is the most common use case but the same techniques apply for both This article refers to blocking based on IP address which is very common in automation and refers to the Dynamic Address Group DAG feature of PANOS If you need to block URLs or domains other options are available that are not covered by this guide Requirements To follow this guide it is recommended that that you are familiar with the concepts of Palo Alto Networks NextGeneration Firewalls Security Policies and APIs Some basic understanding of XML is also recommended Make sure you have a Palo Alto Networks NextGeneration Firewall deployed and that you have administrative access to its Management interface via HTTPS To avoid potential disruptions its recommended to run all the tests on a nonproduction environment No specific programming language expertise is required although Python is recommended Examples with both curldocsxmlapiqs and panpythondocspanpythonqs are provided Steps To block traffic tofrom specific IP addresses you will go through the following steps described in this guide Configure a Dynamic Address Group DAG that will use a specific tag for membership Create a Security Policy that uses that DAG as the source or destination depending on the use case Commit the Firewall configuration to make sure that the changes are applied Obtain the NextGeneration Firewalls API Key to programmatically interact with the API Use the PANOS XML API to associate IP addresses to the tag you previously created Verify that the configuration is working Use API to deassociate the IP Addresses from the tag cleanup More information about DAGs are available herehttpsdocspaloaltonetworkscompanos90panosadminpolicymonitorchangesinthevirtualenvironmentusedynamicaddressgroupsinpolicyhtml The scope of this tutorial is to demonstrate how to programmatically taguntag IPs that can be used in policies The policies will be created manually via the Web UI Automating the creation of Security Policies is possible with PANOS although more considerations have to be taken into account Zones ordering of rules etc and it is not covered in this guide Step 1 Create a Dynamic Address Group To create a DAG follow these steps 1 Login on the NextGeneration Firewall with administrative credentials Loginimg01loginpng Login 2 Navigate to Objects Address Groups then click on Add Add Address Groupimg02addaddresspng Add Address Group 3 Enter the Name testBlock in the example select Dynamic as Type In the Match window type malicious Note the single quotes This is the name of the tag you are going to use for matching Every IP that is tagged with the malicious tag will be automatically added in this Dynamic Address Group Note that you can use the and and or keywords if you want the DAG to match multiple tags Then click on OK Dynamic Groupimg03dynamicgrouppng Dynamic Group Step 2 Create a Security Policy As previously mentioned the way you create a Security Policy will determine how the firewall will behave The policy created in this example will block all outgoing connections to malicious IPs eg C2 servers In this case the configuration of the policy will be as follows Source Trust Zone Any IP eg Corporate network Destination Untrust Zone testBlock Dynamic Address Group the IPs you will tag as malicious Application Any Service Any Actions Block To change the use case for example to block infected clients from reaching the Internet you can just use the testBlock DAG in the source instead of the destination To block malicious external IPs from reaching your network from outside you can just flip the Source and the Destination zones Add so on To Create a Security Policy follow these steps 1 Navigate to Policies Security then click on Add Security Policiesimg04policiespng Security Policies 2 Enter the parameters as follows In the General tab enter the policy Name blockDAG in the example Security Policy Generalimg05policygeneralpng Security Policy General In the Source tab Add the trusted zone L3Trust in the example leave the Source Address at Any Security Policy Sourceimg06policysourcepng Security Policy Source In the Destination tab Add the untrusted zone L3Untrust in the example and Add the testBlock DAG as the Destination Address Security Policy Destinationimg07policydestinationpng Security Policy Destination In the ServiceURL Category tab select any as the Service Security Policy Serviceimg08policyservicepng Security Policy Service In the Actions tab select Drop as the Action and enable the Log at Session End checkbox Security Policy Actionimg09policyactionspng Security Policy Action 3 Click OK and check the newly created policy Security Policy Listimg10policylistpng Security Policy List The ordering of the policy is very important In this example you must create the blockdrop policy on the top of the ruleset If the policy is shadowed by other rules that allow traffic it wont be matched and the communications will still be allowed The name of the Zones can be different in your setup as well as the network topology Multiple zones can be present Step 3 Commit the configuration Now that the DAG and the policy have been created you can Commit the configuration Commitimg11commitpng Commit The Firewall configuration has been completed No further commits are required by the IP registration process Step 4 Obtain the Firewall API Key It is now time to start interacting with the PANOS APIs If youre able to connect to the Firewall management interface as admin you should also be able to issue commands via the API If you run into issues please check if API access is enableddocsxmlapiqs for your role After that you can generate an API key using the XML APIdocsxmlapiqsgetyourapikey or panpythondocspanpythonapikey The API authentication is based on an API Key which is derived from your credentials username password and a firewall master key The API Key doesnt change unless the credentials change so you can reuse it for subsequent calls Make sure you store it securely and dont leave it behind in the source code of your scripts More information on the API Key is available herehttpsdocspaloaltonetworkscompanos90panospanoramaapigetstartedwiththepanosxmlapigetyourapikeyhtml For more information about the PANOS XML API please refer to the official documentationhttpsdocspaloaltonetworkscompanos90panospanoramaapigetstartedwiththepanosxmlapihtml or follow the quickstartdocsxmlapiqs Step 5 Tag IP addresses To tag IP Addresses using the XML API you must invoke the Firewall API endpoint with the following parameters HTTP Method POST URL api URL Parameters type userid key your API Key POST Parameters cmd XML document with registration information Headers ContentType applicationxwwwformurlencoded You will need to craft an XML document similar to the following xml update malicious malicious The following rules apply For each IP address you want to register you can specify multiple tags Only single IP Addresses are supported no CIDRsRanges For each IP address you can specify the optional persistent parameter The default is 1 which means that the tagging will survive reboots of the Firewall Starting from PANOS 90 for each tag you can specify the optional timeout parameter to specify the expiration in seconds of the tag The default is 0 which means never expire The maximum value is 2592000 30 days The document above applies the malicious tag to IP addresses 10001 and 10002 the first in a persistent way with no expiration the latter in a nonpersistent way with an automatic expiration time of 1 hour You can now push the document to the PANOS XML API to register the IPs Method 1 curl Create a document similar to the one above called uidregisterxml Then call curl with the following parameters bash curl k X POST httpsapitypeuseridkey dataurlencode cmduidregisterxml The successful response will be similar to the following xml 20 Method 2 panpython Create a document similar to the one above called uidregisterxml Then use panxapipy to set the tags bash panxapipy U uidregisterxml h K Example output bash dynamicupdate success Step 6 Verify To verify the successful tagging you can either use the UI or the CLI If the membership is correct it means that the Dynamic Address Group has been populated with the IPs you tagged You should also test some network connections to make sure that the traffic is blocked and the dropped connections show up in the Traffic logs if the traffic is not blocked it might be a problem within the Security Policy configuration ie another policy shadowing the one you created Method 1 Web UI After logging on the Firewall Web UI as admin navigate on Objects Dynamic Groups Locate the DAG you previously created testBlock in the example Under the Addresses column click on more If successful it will display the IP addresses currently associated with the DAG as shown in the following screenshot Successful IP Registrationimg12checkdagpng Successful IP Registration Method 2 CLI You can login on the Firewall via SSH as admin and run the following commands to check if the DAGs have been populated successfully and the IPs have been tagged show object dynamicaddressgroup all to check the DAG membership show object registeredip all to check the IP tagging Check DAG membership bash show object dynamicaddressgroup all Example output console Dynamic address groups in vsys vsys1 "
  },
  {
    "title": "API Key Generation",
    "description": "Generating an API key with pan-python",
    "keywords": [
      "pan-os",
      "panos",
      "xml",
      "api",
      "quickstart",
      "pan-python",
      "sdk",
      "apikey",
      "key",
      "python"
    ],
    "href": "/panpython_apikey",
    "content": " Requests made to the PANOS XML API will require authentication in the form of an API key The following steps will walk you through the process of generating a key and storing it for future use The panxapipy k option performs the typekeygen API request to generate the API key for an administrator account The h and l ell options specify the hostname or IP address of the firewall and username and password arguments for the API request Generate API Key panxapipy h 103011101 l adminadmin k Example output keygen success API key LUFRPT14MW5xOEo1R09KVlBZNnpnemh0VHRBOWl6TGM9bXcwM3JHUGVhRlNiY0dCR0srNERUQT09 For brevity the labs use the superuser administrator account admin creating API administrator accounts using a custom admin role with the least privilege set of XML API types required for your usage is recommended A panrchttpsgithubcomkevinstevespanpythonblobmasterdocpanrcrst file contains hostname and API key variables optionally referenced by a tagname using the panxapipy t option The panrc file is a convenient way to store API keys for all your firewalls in a file then reference those keys by tag when executing API calls Youll create a panrc file in Lab 2 at the bottom of this page and use it for all following API calls When t is combined with h l and k panxapipy writes panrc format lines with the hostname and apikey variables to stdout Generate panrc without tagname Use a null string for the tagname to create tagless variables these are matched when t is not specified panxapipy t h 103011101 l adminadmin k Example output keygen success panxapipy generated 20170408 090542 hostname103011101 apikeyLUFRPT14MW5xOEo1R09KVlBZNnpnemh0VHRBOWl6TGM9bXcwM3JHUGVhRlNiY0dCR0srNERUQT09 Generate panrc with tagname panxapipy t xapilab h 103011101 l admin k Example output Password keygen success panxapipy generated 20170408 090847 hostnamexapilab103011101 apikeyxapilabLUFRPT14MW5xOEo1R09KVlBZNnpnemh0VHRBOWl6TGM9bXcwM3JHUGVhRlNiY0dCR0srNERUQT09 When the password is not specified on the command line the user is prompted for it This is useful to avoid leaving the password in the shell history Create panrc file using shell output redirection Shell output redirection can be used to create your panrc file panxapipy t xapilab h 103011101 l admin k panrc Example output Password keygen success Set least privilege permissions chmod 600 panrc The panrc file contains authentication material it should have strict file permissions readwrite for the owner and not accessible by group or other The panrc file entries with your tagname are verified by performing an operational command API request with o cmd "
  },
  {
    "title": "Operational Commands",
    "description": "Performing operational commands with pan-python",
    "keywords": [
      "pan-os",
      "panos",
      "xml",
      "api",
      "quickstart",
      "pan-python",
      "sdk",
      "apikey",
      "key",
      "python",
      "op",
      "operational"
    ],
    "href": "/panpython_op",
    "content": " Operational Commands The panxapipy o option performs the typeop API request to execute operational commands CLI The command is specified with the cmd argument which is an XML representation of the command line The X option converts a CLIstyle cmd argument to XML in some cases the expected XML document cannot be derived Show System Info panxapipy Xjro show system info Example output op success system appreleasedate 20180320 155721 PDT appversion 7934594 avreleasedate 20180325 095822 PDT avversion 25603056 cloudmode noncloud defaultgateway 1921681254 devicename PAVM family vm globalprotectclientpackageversion 000 globalprotectclientlessvpnreleasedate null globalprotectclientlessvpnversion 0 globalprotectdatafilereleasedate unknown globalprotectdatafileversion unknown hostname PAVM ipaddress 1921681103 ipv6address unknown ipv6defaultgateway null ipv6linklocaladdress fe8020c29fffe10b6a64 isdhcp false logdbversion 818 macaddress 000c29100b6a model PAVM multivsys off netmask 2552552550 operationalmode normal platformfamily vm publicipaddress unknown serial 015351000006388 swversion 810 threatreleasedate 20180320 155721 PDT threatversion 7934594 time Thu Apr 5 172401 2018n uptime 29 days 201951 urldb paloaltonetworks urlfilteringversion 2018040540003 vmcpuid ESXE3060500FFFBAB1F vmlicense VM50 vmmacbase E4A7490A1800 vmmaccount 256 vmmode VMWare ESXi vmuuid 564DB8BD331511195608E36D8E100B6A vpndisablemode off wfprivatereleasedate unknown wfprivateversion 0 wildfirereleasedate 20180326 091506 PDT wildfireversion 229813232248 This example used jr to select the result content of the response as JSON Response output options include from panxapipy help x print XML response to stdout p print XML response in Python to stdout j print XML resp "
  },
  {
    "title": "Quickstart",
    "description": "Getting started with pan-python",
    "keywords": [
      "pan-os",
      "panos",
      "xml",
      "api",
      "quickstart",
      "pan-python",
      "sdk",
      "python"
    ],
    "href": "/panpython_qs",
    "content": " GitHub pagehttpsimgshieldsiobadgeGitHubRepobrightgreenstyleforthebadgelogogithubhttpsgithubcomkevinstevespanpython GitHub starshttpsimgshieldsiogithubstarskevinstevespanpythonstyleforthebadgehttpsgithubcomkevinstevespanpython The following guide will walk you through installing panpython a powerful SDK capable of supporting a variety of automation projects and use cases Introducing panpython panpython is a multitool set for Palo Alto Networks PANOS Panorama WildFire and AutoFocus The panxapipyhttpsgithubcomkevinstevespanpythonblobmasterdocpanxapirst command line program bundled with panpython will be used to complete the following steps Where to download and install panpython is available on GitHub at as a package on PyPihttpspypipythonorgpypipanpython Python Package Index or can be installed using piphttpspippypaioenlatestquickstart on Python 27 or 3x panpython has no dependencies Documentation Documentationhttpsgithubcomkevinstevespanpythontreemasterdoc is available on GitHub and as HTML from the package doc directory Install panpython using pip Install panpython pip install user panpython Example output Collecting panpython Downloading panpython0110targz 109kB 100 112kB 20MBs Building wheels for collected packages panpython Running setuppy bdistwheel for panpython done Stored in directory homeubuntucachepipwheelsf44c3ef8d30075fc8084fd786f23f7751e98a9802759539d500b24de Successfully built panpython Installing collected packages panpython Successfully installed panpython0110 Show version Check your panpython version panxapipy version Example output panpython 0110 By default pip installs the latest version of the package "
  },
  {
    "title": "Quickstart",
    "description": "Overview of the PAN-OS API",
    "keywords": ["pan-os", "panos", "api", "rest", "quickstart"],
    "href": "/restapi_qs",
    "content": " The following guide will walk you through sending API requests to the PANOS REST API using cURL although you may optionally use another API tool such as Postman Insomnia or RESTClient Enable API Access 1 Select an Admin Role profile Go to Device Admin Roles and select or create an admin role 2 Select features available to the admin role Select the XML API tab Enable or disable XML API features from the list such as Report Log and Configuration Select OK to confirm your change 3 Assign the admin role to an administrator account Consult the official product documentationhttpsdocspaloaltonetworkscompanos90panospanoramaapigetstartedwiththepanosxmlapigetyourapikeyhtml for more details Get Your API Key 1 Make a GET or POST request to the firewalls hostname or IP address using the administrative credentials and the typekeygen URL query argument Be sure to replace and with actual values console curl k X GET httpsapitypekeygenuserpassword or console curl k X POST httpsapitypekeygenuserpassword A successful API call returns statussuccess along with the API key within the key element javascript gJlQWE56987nBxIqyfa62sZeRtYuIo2BgzEA9UOnlZBhU Access the PANOS REST API The PANOS REST API URL format includes a base path and endpoint console httpsrestapi Available resource endpoints console OBJECTS restapi90ObjectsAddresses restapi90ObjectsAddressGroups restapi90ObjectsRegions restapi90ObjectsApplications restapi90ObjectsApplicationGroups restapi90ObjectsApplicationFilters restapi90ObjectsServices restapi90ObjectsServiceGroups restapi90ObjectsTags restapi90ObjectsGlobalProtectHIPObjects restapi90ObjectsGlobalProtectHIPProfiles restapi90ObjectsExternalDynamicLists restapi90ObjectsCustomDataPatterns restapi90ObjectsCustomSpywareSignatures restapi90ObjectsCustomVulnerabilitySignatures restapi90ObjectsCustomURLCategories restapi90ObjectsAntivirusSecurityProfiles restapi90ObjectsAntiSpywareSecurityProfiles restapi90ObjectsVulnerabilityProtectionSecurityProfiles restapi90ObjectsURLFilteringSecurityProfiles restapi90ObjectsFileBlockingSecurityProfiles restapi90ObjectsWildFireAnalysisSecurityProfiles restapi90ObjectsDataFilteringSecurityProfiles restapi90ObjectsDoSProtectionSecurityProfiles restapi90ObjectsSecurityProfileGroups restapi90ObjectsLogForwardingProfiles restapi90ObjectsAuthenticationEnforcements restapi90ObjectsDecryptionProfiles restapi90ObjectsDecryptionForwardingProfiles restapi90ObjectsSchedules POLICIES restapi90PoliciesSecurityRules restapi90PoliciesNATRules restapi90PoliciesQoSRules restapi90PoliciesPolicyBasedForwardingRules restapi90PoliciesDecryptionRules restapi90PoliciesTunnelInspectionRules restapi90PoliciesApplicationOverrideRules restapi90PoliciesAuthenticationRules restapi90PoliciesDoSRules "
  },
  {
    "title": "Terraform ELB Integration",
    "href": "/terraform_elb",
    "content": " AWS ELB Sandwich with PANFW Deployed using terraformversion Terraform is a DSL which allows users to define infrastructure as code along with the capability to deploy that infrastructure onto the cloud platform of choice 1 Terraform Code Overview Directory Layout "
  },
  {
    "title": "Quickstart",
    "href": "/terraform_qs",
    "content": " Help needed "
  },
  {
    "title": "XFF to User ID Mapping",
    "href": "/xff_demo",
    "content": " Overview "
  },
  {
    "title": "Quickstart",
    "description": "PAN-OS® XML API Quickstart",
    "keywords": ["pan-os", "panos", "xml", "api", "quickstart"],
    "href": "/xmlapi_qs",
    "content": " The following guide will walk you through sending API requests to the PANOS XML API using cURL although you may optionally use another API tool such as Postman Insomnia or RESTClient Enable API Access 1 Select an Admin Role profile Go to Device Admin Roles and select or create an admin role 2 Select features available to the admin role Select the XML API tab Enable or disable XML API features from the list such as Report Log and Configuration Select OK to confirm your change 3 Assign the admin role to an administrator account Consult the official product documentationhttpsdocspaloaltonetworkscompanos90panospanoramaapigetstartedwiththepanosxmlapienableapiaccesshtml for more details Get Your API Key 1 Make a GET or POST request to the firewalls hostname or IP address using the administrative credentials and the typekeygen URL query argument Be sure to replace and with actual values console curl k X GET httpsapitypekeygenuserpassword or console curl k X POST httpsapitypekeygenuserpassword A successful API call returns statussuccess along with the API key within the key element javascript gJlQWE56987nBxIqyfa62sZeRtYuIo2BgzEA9UOnlZBhU Make Your First API Call The following example illustrates how to perform the op command show system info using cURL console curl k httpsapitypeopcmdkey If successful the response from the API should look similar to the following javascript PA3050A 10234 unknown 2552552520 10231 no unknown c12321bfffffeffc123464 000000ffc700 Tue Jan 8 162256 2019 0 days 182838 PA3050A 3000 PA3050 001701000529 noncloud 900b36 000 81115239 20190107 155130 PST 33283783 20190107 112202 PST 81115239 20190107 155130 PST 0 unknown paloaltonetworks 0 2019010920005 unknown unknown 0 9010 3000 off on normal Explore the API Hungry for more Check out the official XML API product documentation for a complete reference of available API endpoints and commands "
  }
]
